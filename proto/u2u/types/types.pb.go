// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: u2u/types/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Validator struct {
	Address                   []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StakedBalance             uint64 `protobuf:"varint,2,opt,name=staked_balance,json=stakedBalance,proto3" json:"staked_balance,omitempty"`
	Slashed                   bool   `protobuf:"varint,3,opt,name=slashed,proto3" json:"slashed,omitempty"`
	ActivationEpoch           uint64 `protobuf:"varint,4,opt,name=activation_epoch,json=activationEpoch,proto3" json:"activation_epoch,omitempty"`
	ExitEpoch                 uint64 `protobuf:"varint,5,opt,name=exit_epoch,json=exitEpoch,proto3" json:"exit_epoch,omitempty"`
	WithdrawableEpoch         uint64 `protobuf:"varint,6,opt,name=withdrawable_epoch,json=withdrawableEpoch,proto3" json:"withdrawable_epoch,omitempty"`
	AccumulatedRewardPerToken uint64 `protobuf:"varint,7,opt,name=accumulated_reward_per_token,json=accumulatedRewardPerToken,proto3" json:"accumulated_reward_per_token,omitempty"`
	CommissionReward          uint64 `protobuf:"varint,8,opt,name=commission_reward,json=commissionReward,proto3" json:"commission_reward,omitempty"`
	LastBlockId               uint64 `protobuf:"varint,9,opt,name=last_block_id,json=lastBlockId,proto3" json:"last_block_id,omitempty"`
	LastOnlineTime            uint64 `protobuf:"varint,10,opt,name=last_online_time,json=lastOnlineTime,proto3" json:"last_online_time,omitempty"`
	Uptime                    uint64 `protobuf:"varint,11,opt,name=uptime,proto3" json:"uptime,omitempty"`
	PrevTxFees                uint64 `protobuf:"varint,12,opt,name=prev_tx_fees,json=prevTxFees,proto3" json:"prev_tx_fees,omitempty"`
	TxFees                    uint64 `protobuf:"varint,13,opt,name=tx_fees,json=txFees,proto3" json:"tx_fees,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_548ecfac1197eecc, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Validator) GetStakedBalance() uint64 {
	if m != nil {
		return m.StakedBalance
	}
	return 0
}

func (m *Validator) GetSlashed() bool {
	if m != nil {
		return m.Slashed
	}
	return false
}

func (m *Validator) GetActivationEpoch() uint64 {
	if m != nil {
		return m.ActivationEpoch
	}
	return 0
}

func (m *Validator) GetExitEpoch() uint64 {
	if m != nil {
		return m.ExitEpoch
	}
	return 0
}

func (m *Validator) GetWithdrawableEpoch() uint64 {
	if m != nil {
		return m.WithdrawableEpoch
	}
	return 0
}

func (m *Validator) GetAccumulatedRewardPerToken() uint64 {
	if m != nil {
		return m.AccumulatedRewardPerToken
	}
	return 0
}

func (m *Validator) GetCommissionReward() uint64 {
	if m != nil {
		return m.CommissionReward
	}
	return 0
}

func (m *Validator) GetLastBlockId() uint64 {
	if m != nil {
		return m.LastBlockId
	}
	return 0
}

func (m *Validator) GetLastOnlineTime() uint64 {
	if m != nil {
		return m.LastOnlineTime
	}
	return 0
}

func (m *Validator) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Validator) GetPrevTxFees() uint64 {
	if m != nil {
		return m.PrevTxFees
	}
	return 0
}

func (m *Validator) GetTxFees() uint64 {
	if m != nil {
		return m.TxFees
	}
	return 0
}

type Block struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_548ecfac1197eecc, []int{1}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Block) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Block) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type Withdrawal struct {
	ValidatorIndex uint64 `protobuf:"varint,1,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	DelegatorIndex uint64 `protobuf:"varint,2,opt,name=delegator_index,json=delegatorIndex,proto3" json:"delegator_index,omitempty"`
	Amount         uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Epoch          uint64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *Withdrawal) Reset()         { *m = Withdrawal{} }
func (m *Withdrawal) String() string { return proto.CompactTextString(m) }
func (*Withdrawal) ProtoMessage()    {}
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_548ecfac1197eecc, []int{2}
}
func (m *Withdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdrawal.Merge(m, src)
}
func (m *Withdrawal) XXX_Size() int {
	return m.Size()
}
func (m *Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_Withdrawal proto.InternalMessageInfo

func (m *Withdrawal) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Withdrawal) GetDelegatorIndex() uint64 {
	if m != nil {
		return m.DelegatorIndex
	}
	return 0
}

func (m *Withdrawal) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Withdrawal) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type WithdrawalReward struct {
	DelegatorIndex uint64 `protobuf:"varint,1,opt,name=delegator_index,json=delegatorIndex,proto3" json:"delegator_index,omitempty"`
	Amount         uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *WithdrawalReward) Reset()         { *m = WithdrawalReward{} }
func (m *WithdrawalReward) String() string { return proto.CompactTextString(m) }
func (*WithdrawalReward) ProtoMessage()    {}
func (*WithdrawalReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_548ecfac1197eecc, []int{3}
}
func (m *WithdrawalReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalReward.Merge(m, src)
}
func (m *WithdrawalReward) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalReward) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalReward.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalReward proto.InternalMessageInfo

func (m *WithdrawalReward) GetDelegatorIndex() uint64 {
	if m != nil {
		return m.DelegatorIndex
	}
	return 0
}

func (m *WithdrawalReward) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Delegator struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Delegator) Reset()         { *m = Delegator{} }
func (m *Delegator) String() string { return proto.CompactTextString(m) }
func (*Delegator) ProtoMessage()    {}
func (*Delegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_548ecfac1197eecc, []int{4}
}
func (m *Delegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegator.Merge(m, src)
}
func (m *Delegator) XXX_Size() int {
	return m.Size()
}
func (m *Delegator) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegator.DiscardUnknown(m)
}

var xxx_messageInfo_Delegator proto.InternalMessageInfo

func (m *Delegator) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type Delegation struct {
	ValidatorIndex                uint64 `protobuf:"varint,1,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	DelegatorIndex                uint64 `protobuf:"varint,2,opt,name=delegator_index,json=delegatorIndex,proto3" json:"delegator_index,omitempty"`
	Amount                        uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	LastAccumulatedRewardPerToken uint64 `protobuf:"varint,4,opt,name=last_accumulated_reward_per_token,json=lastAccumulatedRewardPerToken,proto3" json:"last_accumulated_reward_per_token,omitempty"`
}

func (m *Delegation) Reset()         { *m = Delegation{} }
func (m *Delegation) String() string { return proto.CompactTextString(m) }
func (*Delegation) ProtoMessage()    {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_548ecfac1197eecc, []int{5}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

func (m *Delegation) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Delegation) GetDelegatorIndex() uint64 {
	if m != nil {
		return m.DelegatorIndex
	}
	return 0
}

func (m *Delegation) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Delegation) GetLastAccumulatedRewardPerToken() uint64 {
	if m != nil {
		return m.LastAccumulatedRewardPerToken
	}
	return 0
}

func init() {
	proto.RegisterType((*Validator)(nil), "u2u.types.Validator")
	proto.RegisterType((*Block)(nil), "u2u.types.Block")
	proto.RegisterType((*Withdrawal)(nil), "u2u.types.Withdrawal")
	proto.RegisterType((*WithdrawalReward)(nil), "u2u.types.WithdrawalReward")
	proto.RegisterType((*Delegator)(nil), "u2u.types.Delegator")
	proto.RegisterType((*Delegation)(nil), "u2u.types.Delegation")
}

func init() { proto.RegisterFile("u2u/types/types.proto", fileDescriptor_548ecfac1197eecc) }

var fileDescriptor_548ecfac1197eecc = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x80, 0x97, 0xae, 0xeb, 0xd6, 0xb7, 0xae, 0xeb, 0x2c, 0x18, 0x41, 0x62, 0x55, 0x89, 0x34,
	0x51, 0x84, 0xb6, 0x4a, 0xe3, 0xce, 0xc4, 0x04, 0x88, 0x9d, 0x40, 0x61, 0x02, 0xc4, 0x25, 0x72,
	0xe3, 0xb7, 0xc6, 0x5a, 0x12, 0x47, 0x89, 0xbd, 0x95, 0xff, 0xc0, 0x81, 0x9f, 0xc4, 0x91, 0xe3,
	0x8e, 0x1c, 0xd1, 0x76, 0xe7, 0x37, 0x20, 0x3f, 0xa7, 0x6b, 0x0f, 0x0c, 0x6e, 0x5c, 0xaa, 0xbc,
	0xef, 0x7d, 0xcf, 0xcf, 0xb5, 0x5f, 0x02, 0x77, 0xcd, 0x81, 0x19, 0xe9, 0xcf, 0x05, 0x56, 0xee,
	0x77, 0xbf, 0x28, 0x95, 0x56, 0xac, 0x6d, 0x0e, 0xcc, 0x3e, 0x81, 0xe0, 0xd7, 0x32, 0xb4, 0xdf,
	0xf3, 0x54, 0x0a, 0xae, 0x55, 0xc9, 0x7c, 0x58, 0xe5, 0x42, 0x94, 0x58, 0x55, 0xbe, 0x37, 0xf0,
	0x86, 0x9d, 0x70, 0x16, 0xb2, 0x5d, 0xe8, 0x56, 0x9a, 0x9f, 0xa1, 0x88, 0xc6, 0x3c, 0xe5, 0x79,
	0x8c, 0x7e, 0x63, 0xe0, 0x0d, 0x9b, 0xe1, 0x86, 0xa3, 0x47, 0x0e, 0xda, 0x05, 0xaa, 0x94, 0x57,
	0x09, 0x0a, 0x7f, 0x79, 0xe0, 0x0d, 0xd7, 0xc2, 0x59, 0xc8, 0x1e, 0x43, 0x8f, 0xc7, 0x5a, 0x9e,
	0x73, 0x2d, 0x55, 0x1e, 0x61, 0xa1, 0xe2, 0xc4, 0x6f, 0xd2, 0x12, 0x9b, 0x73, 0xfe, 0xd2, 0x62,
	0xb6, 0x03, 0x80, 0x53, 0xa9, 0x6b, 0x69, 0x85, 0xa4, 0xb6, 0x25, 0x2e, 0xbd, 0x07, 0xec, 0x42,
	0xea, 0x44, 0x94, 0xfc, 0x82, 0x8f, 0x53, 0xac, 0xb5, 0x16, 0x69, 0x5b, 0x8b, 0x19, 0xa7, 0x1f,
	0xc2, 0x03, 0x1e, 0xc7, 0x26, 0x33, 0x29, 0xd7, 0x28, 0xa2, 0x12, 0x2f, 0x78, 0x29, 0xa2, 0x02,
	0xcb, 0x48, 0xab, 0x33, 0xcc, 0xfd, 0x55, 0x2a, 0xbc, 0xbf, 0xe0, 0x84, 0xa4, 0xbc, 0xc5, 0xf2,
	0xc4, 0x0a, 0xec, 0x09, 0x6c, 0xc5, 0x2a, 0xcb, 0x64, 0x55, 0xd9, 0x9d, 0xbb, 0x7a, 0x7f, 0x8d,
	0xaa, 0x7a, 0xf3, 0x84, 0x2b, 0x62, 0x01, 0x6c, 0xa4, 0xbc, 0xd2, 0xd1, 0x38, 0x55, 0xf1, 0x59,
	0x24, 0x85, 0xdf, 0x26, 0x71, 0xdd, 0xc2, 0x23, 0xcb, 0x8e, 0x05, 0x1b, 0x42, 0x8f, 0x1c, 0x95,
	0xa7, 0x32, 0xc7, 0x48, 0xcb, 0x0c, 0x7d, 0x20, 0xad, 0x6b, 0xf9, 0x1b, 0xc2, 0x27, 0x32, 0x43,
	0xb6, 0x0d, 0x2d, 0x53, 0x50, 0x7e, 0x9d, 0xf2, 0x75, 0xc4, 0x06, 0xd0, 0x29, 0x4a, 0x3c, 0x8f,
	0xf4, 0x34, 0x3a, 0x45, 0xac, 0xfc, 0x0e, 0x65, 0xc1, 0xb2, 0x93, 0xe9, 0x2b, 0xc4, 0x8a, 0xdd,
	0x83, 0xd5, 0x59, 0x72, 0xc3, 0x95, 0x6a, 0x4a, 0x04, 0x87, 0xb0, 0x42, 0xfb, 0x60, 0x5d, 0x68,
	0x48, 0x41, 0xd7, 0xdc, 0x0c, 0x1b, 0x52, 0x30, 0x06, 0x4d, 0xea, 0xe4, 0xee, 0x95, 0x9e, 0x2d,
	0x4b, 0x78, 0x95, 0xd0, 0x5d, 0x76, 0x42, 0x7a, 0x0e, 0xbe, 0x78, 0x00, 0x1f, 0x66, 0xa7, 0x9c,
	0xb2, 0x47, 0xb0, 0x79, 0x3e, 0x9b, 0x9f, 0x48, 0xe6, 0x02, 0xa7, 0xf5, 0x9a, 0xdd, 0x1b, 0x7c,
	0x6c, 0xa9, 0x15, 0x05, 0xa6, 0x38, 0x59, 0x10, 0x5d, 0xab, 0xee, 0x0d, 0x76, 0xe2, 0x36, 0xb4,
	0x78, 0xa6, 0x4c, 0xae, 0xa9, 0x6d, 0x33, 0xac, 0x23, 0x76, 0x07, 0x56, 0x16, 0xc7, 0xc6, 0x05,
	0xc1, 0x3b, 0xe8, 0xcd, 0x77, 0x53, 0x5f, 0xc2, 0x1f, 0x5a, 0x79, 0xff, 0x68, 0xd5, 0x58, 0x6c,
	0x15, 0xec, 0x42, 0xfb, 0xc5, 0xcc, 0xbc, 0xfd, 0xa5, 0x08, 0xbe, 0x79, 0x00, 0xb5, 0x27, 0x55,
	0xfe, 0x1f, 0x8f, 0xe2, 0x35, 0x3c, 0xa4, 0x09, 0xfa, 0xeb, 0x60, 0xbb, 0x63, 0xda, 0xb1, 0xe2,
	0xf3, 0xdb, 0x86, 0xfb, 0xe8, 0xe3, 0xf7, 0xab, 0xbe, 0x77, 0x79, 0xd5, 0xf7, 0x7e, 0x5e, 0xf5,
	0xbd, 0xaf, 0xd7, 0xfd, 0xa5, 0xcb, 0xeb, 0xfe, 0xd2, 0x8f, 0xeb, 0xfe, 0xd2, 0xa7, 0x67, 0x13,
	0xa9, 0x13, 0x33, 0xde, 0x8f, 0x55, 0x36, 0x32, 0xb9, 0x8c, 0x55, 0x99, 0x9b, 0x54, 0x97, 0xfc,
	0x54, 0x99, 0x5c, 0xd0, 0x1f, 0x1e, 0x4d, 0xd4, 0x9e, 0x1d, 0x89, 0x49, 0xc9, 0x8b, 0x64, 0x44,
	0x9f, 0x96, 0xd1, 0xcd, 0x07, 0x67, 0xdc, 0x22, 0xf0, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x44, 0x36, 0xf1, 0x59, 0x84, 0x04, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TxFees))
		i--
		dAtA[i] = 0x68
	}
	if m.PrevTxFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PrevTxFees))
		i--
		dAtA[i] = 0x60
	}
	if m.Uptime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x58
	}
	if m.LastOnlineTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastOnlineTime))
		i--
		dAtA[i] = 0x50
	}
	if m.LastBlockId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastBlockId))
		i--
		dAtA[i] = 0x48
	}
	if m.CommissionReward != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CommissionReward))
		i--
		dAtA[i] = 0x40
	}
	if m.AccumulatedRewardPerToken != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AccumulatedRewardPerToken))
		i--
		dAtA[i] = 0x38
	}
	if m.WithdrawableEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.WithdrawableEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.ExitEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExitEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.ActivationEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ActivationEpoch))
		i--
		dAtA[i] = 0x20
	}
	if m.Slashed {
		i--
		if m.Slashed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.StakedBalance != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StakedBalance))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Withdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.DelegatorIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DelegatorIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawalReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.DelegatorIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DelegatorIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Delegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastAccumulatedRewardPerToken != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastAccumulatedRewardPerToken))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.DelegatorIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DelegatorIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StakedBalance != 0 {
		n += 1 + sovTypes(uint64(m.StakedBalance))
	}
	if m.Slashed {
		n += 2
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ActivationEpoch))
	}
	if m.ExitEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ExitEpoch))
	}
	if m.WithdrawableEpoch != 0 {
		n += 1 + sovTypes(uint64(m.WithdrawableEpoch))
	}
	if m.AccumulatedRewardPerToken != 0 {
		n += 1 + sovTypes(uint64(m.AccumulatedRewardPerToken))
	}
	if m.CommissionReward != 0 {
		n += 1 + sovTypes(uint64(m.CommissionReward))
	}
	if m.LastBlockId != 0 {
		n += 1 + sovTypes(uint64(m.LastBlockId))
	}
	if m.LastOnlineTime != 0 {
		n += 1 + sovTypes(uint64(m.LastOnlineTime))
	}
	if m.Uptime != 0 {
		n += 1 + sovTypes(uint64(m.Uptime))
	}
	if m.PrevTxFees != 0 {
		n += 1 + sovTypes(uint64(m.PrevTxFees))
	}
	if m.TxFees != 0 {
		n += 1 + sovTypes(uint64(m.TxFees))
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.Time != 0 {
		n += 1 + sovTypes(uint64(m.Time))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Withdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorIndex))
	}
	if m.DelegatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.DelegatorIndex))
	}
	if m.Amount != 0 {
		n += 1 + sovTypes(uint64(m.Amount))
	}
	if m.Epoch != 0 {
		n += 1 + sovTypes(uint64(m.Epoch))
	}
	return n
}

func (m *WithdrawalReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.DelegatorIndex))
	}
	if m.Amount != 0 {
		n += 1 + sovTypes(uint64(m.Amount))
	}
	return n
}

func (m *Delegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorIndex))
	}
	if m.DelegatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.DelegatorIndex))
	}
	if m.Amount != 0 {
		n += 1 + sovTypes(uint64(m.Amount))
	}
	if m.LastAccumulatedRewardPerToken != 0 {
		n += 1 + sovTypes(uint64(m.LastAccumulatedRewardPerToken))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedBalance", wireType)
			}
			m.StakedBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Slashed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitEpoch", wireType)
			}
			m.ExitEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawableEpoch", wireType)
			}
			m.WithdrawableEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawableEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedRewardPerToken", wireType)
			}
			m.AccumulatedRewardPerToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccumulatedRewardPerToken |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionReward", wireType)
			}
			m.CommissionReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockId", wireType)
			}
			m.LastBlockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOnlineTime", wireType)
			}
			m.LastOnlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOnlineTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTxFees", wireType)
			}
			m.PrevTxFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevTxFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFees", wireType)
			}
			m.TxFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorIndex", wireType)
			}
			m.DelegatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorIndex", wireType)
			}
			m.DelegatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorIndex", wireType)
			}
			m.DelegatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccumulatedRewardPerToken", wireType)
			}
			m.LastAccumulatedRewardPerToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAccumulatedRewardPerToken |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
