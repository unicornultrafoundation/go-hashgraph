// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: u2u/state/types.proto

package state

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/unicornultrafoundation/go-hashgraph/proto/u2u/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type State struct {
	Epoch             uint64                    `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Time              uint64                    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	PrevTime          uint64                    `protobuf:"varint,3,opt,name=prev_time,json=prevTime,proto3" json:"prev_time,omitempty"`
	LastBlock         *types.Block              `protobuf:"bytes,4,opt,name=last_block,json=lastBlock,proto3" json:"last_block,omitempty"`
	Validators        []*types.Validator        `protobuf:"bytes,5,rep,name=validators,proto3" json:"validators,omitempty"`
	StakedBalances    []uint64                  `protobuf:"varint,6,rep,packed,name=staked_balances,json=stakedBalances,proto3" json:"staked_balances,omitempty"`
	Delegations       []*types.Delegation       `protobuf:"bytes,7,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Delegators        []*types.Delegator        `protobuf:"bytes,8,rep,name=delegators,proto3" json:"delegators,omitempty"`
	Withdrawals       []*types.Withdrawal       `protobuf:"bytes,9,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	WithdrawalRewards []*types.WithdrawalReward `protobuf:"bytes,10,rep,name=withdrawalRewards,proto3" json:"withdrawalRewards,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee737ba01cad71ac, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *State) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *State) GetPrevTime() uint64 {
	if m != nil {
		return m.PrevTime
	}
	return 0
}

func (m *State) GetLastBlock() *types.Block {
	if m != nil {
		return m.LastBlock
	}
	return nil
}

func (m *State) GetValidators() []*types.Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *State) GetStakedBalances() []uint64 {
	if m != nil {
		return m.StakedBalances
	}
	return nil
}

func (m *State) GetDelegations() []*types.Delegation {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *State) GetDelegators() []*types.Delegator {
	if m != nil {
		return m.Delegators
	}
	return nil
}

func (m *State) GetWithdrawals() []*types.Withdrawal {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

func (m *State) GetWithdrawalRewards() []*types.WithdrawalReward {
	if m != nil {
		return m.WithdrawalRewards
	}
	return nil
}

func init() {
	proto.RegisterType((*State)(nil), "u2u.state.State")
}

func init() { proto.RegisterFile("u2u/state/types.proto", fileDescriptor_ee737ba01cad71ac) }

var fileDescriptor_ee737ba01cad71ac = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x6a, 0xe3, 0x30,
	0x14, 0x86, 0xe3, 0xb1, 0x93, 0x89, 0x15, 0x98, 0x8b, 0x48, 0x40, 0x4c, 0xc0, 0x98, 0xd9, 0x8c,
	0x37, 0x63, 0x83, 0x5b, 0xe8, 0xae, 0x8b, 0x90, 0x4d, 0xb7, 0x6a, 0x69, 0x4b, 0x37, 0x41, 0xb6,
	0x55, 0xdb, 0xc4, 0xb1, 0x8c, 0x2e, 0x09, 0x7d, 0x8b, 0x3e, 0x56, 0x97, 0xe9, 0xae, 0xcb, 0x92,
	0xbc, 0x48, 0x91, 0x72, 0xa9, 0x21, 0xdd, 0xe9, 0xfc, 0xdf, 0x77, 0x74, 0x8e, 0x40, 0x60, 0xa4,
	0x62, 0x15, 0x09, 0x49, 0x24, 0x8d, 0xe4, 0x53, 0x43, 0x45, 0xd8, 0x70, 0x26, 0x19, 0x74, 0x55,
	0xac, 0x42, 0x13, 0xff, 0x31, 0x86, 0x61, 0x6d, 0xe3, 0xef, 0xab, 0x0d, 0xba, 0xd7, 0x5a, 0x80,
	0x43, 0xd0, 0xa5, 0x0d, 0x4b, 0x0b, 0x64, 0xf9, 0x56, 0xe0, 0xe0, 0x5d, 0x01, 0x21, 0x70, 0x64,
	0xb9, 0xa0, 0xe8, 0x9b, 0x09, 0xcd, 0x19, 0x8e, 0x81, 0xdb, 0x70, 0xba, 0x9c, 0x19, 0x60, 0x1b,
	0xd0, 0xd7, 0xc1, 0x8d, 0x86, 0x11, 0x00, 0x15, 0x11, 0x72, 0x96, 0x54, 0x2c, 0x9d, 0x23, 0xc7,
	0xb7, 0x82, 0x41, 0xfc, 0x2b, 0xd4, 0x7b, 0xec, 0xc6, 0x4e, 0x74, 0x8e, 0x5d, 0xed, 0x98, 0x23,
	0x3c, 0x07, 0x60, 0x49, 0xaa, 0x32, 0x23, 0x92, 0x71, 0x81, 0xba, 0xbe, 0x1d, 0x0c, 0xe2, 0x61,
	0xab, 0xe1, 0xf6, 0x00, 0x71, 0xcb, 0x83, 0xff, 0xc0, 0x4f, 0x21, 0xc9, 0x9c, 0x66, 0xb3, 0x84,
	0x54, 0xa4, 0x4e, 0xa9, 0x40, 0x3d, 0xdf, 0x0e, 0x1c, 0xfc, 0x63, 0x17, 0x4f, 0xf6, 0x29, 0xbc,
	0x00, 0x83, 0x8c, 0x56, 0x34, 0x27, 0xb2, 0x64, 0xb5, 0x40, 0xdf, 0xcd, 0xfd, 0xa3, 0xd6, 0xfd,
	0xd3, 0x23, 0xc5, 0x6d, 0x53, 0xef, 0xb5, 0x2f, 0xf5, 0x5e, 0xfd, 0x93, 0xbd, 0xa6, 0x07, 0x88,
	0x5b, 0x9e, 0x1e, 0xb7, 0x2a, 0x65, 0x91, 0x71, 0xb2, 0x22, 0x95, 0x40, 0xee, 0xc9, 0xb8, 0xbb,
	0x23, 0xc5, 0x6d, 0x13, 0x5e, 0x81, 0xdf, 0x9f, 0x25, 0xa6, 0x2b, 0xc2, 0x33, 0x81, 0x80, 0x69,
	0x1f, 0x7f, 0xdd, 0x6e, 0x1c, 0x7c, 0xda, 0x35, 0xb9, 0x7f, 0xd9, 0x78, 0xd6, 0x7a, 0xe3, 0x59,
	0xef, 0x1b, 0xcf, 0x7a, 0xde, 0x7a, 0x9d, 0xf5, 0xd6, 0xeb, 0xbc, 0x6d, 0xbd, 0xce, 0xc3, 0x65,
	0x5e, 0xca, 0x42, 0x25, 0x61, 0xca, 0x16, 0x91, 0xaa, 0xcb, 0x94, 0xf1, 0x5a, 0x55, 0x92, 0x93,
	0x47, 0xa6, 0xea, 0xcc, 0xbc, 0x3b, 0xca, 0xd9, 0xff, 0x82, 0x88, 0x22, 0xe7, 0xa4, 0x29, 0x22,
	0xf3, 0x47, 0xa2, 0xe3, 0xdf, 0x4a, 0x7a, 0x26, 0x38, 0xfb, 0x08, 0x00, 0x00, 0xff, 0xff, 0x37,
	0x9b, 0x57, 0xca, 0x6f, 0x02, 0x00, 0x00,
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawalRewards) > 0 {
		for iNdEx := len(m.WithdrawalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Withdrawals) > 0 {
		for iNdEx := len(m.Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Delegators) > 0 {
		for iNdEx := len(m.Delegators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.StakedBalances) > 0 {
		dAtA2 := make([]byte, len(m.StakedBalances)*10)
		var j1 int
		for _, num := range m.StakedBalances {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LastBlock != nil {
		{
			size, err := m.LastBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PrevTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PrevTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovTypes(uint64(m.Epoch))
	}
	if m.Time != 0 {
		n += 1 + sovTypes(uint64(m.Time))
	}
	if m.PrevTime != 0 {
		n += 1 + sovTypes(uint64(m.PrevTime))
	}
	if m.LastBlock != nil {
		l = m.LastBlock.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.StakedBalances) > 0 {
		l = 0
		for _, e := range m.StakedBalances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Delegators) > 0 {
		for _, e := range m.Delegators {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Withdrawals) > 0 {
		for _, e := range m.Withdrawals {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WithdrawalRewards) > 0 {
		for _, e := range m.WithdrawalRewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTime", wireType)
			}
			m.PrevTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBlock == nil {
				m.LastBlock = &types.Block{}
			}
			if err := m.LastBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &types.Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StakedBalances = append(m.StakedBalances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StakedBalances) == 0 {
					m.StakedBalances = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StakedBalances = append(m.StakedBalances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedBalances", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &types.Delegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegators = append(m.Delegators, &types.Delegator{})
			if err := m.Delegators[len(m.Delegators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawals = append(m.Withdrawals, &types.Withdrawal{})
			if err := m.Withdrawals[len(m.Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalRewards = append(m.WithdrawalRewards, &types.WithdrawalReward{})
			if err := m.WithdrawalRewards[len(m.WithdrawalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
